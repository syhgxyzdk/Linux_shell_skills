空格导致的


bash编程的初学者才应该好好阅读一下这篇文章
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
 for i in `ls *.mp3`
为什么错呢？
因为for...in语句是按照空格来分词的，包含空格的文件名会被拆成多个词。 
如遇到 01 - Don't Eat the Yellow Snow.mp3 时，i的值会依次取 01，-，Don't，等等。
用双引号也不行，它会将ls *.mp3的全部结果当成一个词来处理。
正确的写法是:
for i in *.mp3; do
cp $file $target
这句话基本上正确，但同样有空格分词的问题,所以应当用双引号：
cp "$file" "$target"
但是如果凑巧文件名以 - 开头，这个文件名会被 cp 当作命令行选项来处理，依旧很头疼。
可以试试下面这个。
cp -- "$file" "$target"
运气差点的再碰上一个不支持 -- 选项的系统，那只能用下面的方法了：使每个变量都以目录开头。
for i in ./*.mp3; do
    cp "$i" /target
done
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
[ $foo = "bar" ]
当$foo为空时，上面的命令就变成了
[ = "bar" ]
类似地，当$foo包含空格时：
[ multiple words here = "bar" ]
两者都会出错。
所以应当用双引号将变量括起来：
[ "$foo" = bar ]     # 几乎正确
但是当$foo以 - 开头时依然会有问题．
在较新的bash中你可以用下面的方法来代替，
用[[ ]]能正确处理空格/横线等问题:
[[ $foo = bar ]]      # 正确
旧版本bash中可以用这个技巧（虽然不好理解）：
[ x"$foo" = xbar ]  # 正确
或者干脆把变量放在右边，因为 [ 命令的等号右边即使是空白或是横线开头，依然能正常工作。 
Java编程风格中也有类似的做法，虽然目的不一样。
[ bar = "$foo" ]      # 正确
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
cd `dirname "$f"`
同样也存在空格问题, 那么加上引号吧。
cd "`dirname "$f"`"
问题来了，是不是写错了？
由于双引号的嵌套，你会认为`dirname 是第一个字符串，`是第二个字符串。
错了, 那是C语言!
在bash中, 命令替换（反引号``中的内容）里面的双引号会被正确地匹配到一起, 不用特意去转义.
$()语法也相同，如下面的写法是正确的。
cd "$(dirname "$f")"  #正确
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
[ "$foo" = bar && "$bar" = foo ]
[ 中不能使用 && 符号！因为 [ 的实质是 test 命令，&& 会把这一行分成两个命令的。应该用以下的写法。
[ bar = "$foo" -a foo = "$bar" ]       　　# Right!
[ bar = "$foo" ] && [ foo = "$bar" ]   　# Also right!
[[ $foo = bar && $bar = foo ]]         　   # Also right!
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
[ $foo > 7 ]
很可惜 [[ 只适用于字符串，不能做数字比较, 数字比较应当这样写：
(( $foo > 7 ))
或者用经典的写法：
[ $foo -gt 7 ]
但上述使用 -gt 的写法有个问题，那就是当 $foo 不是数字时就会出错。
你必须做好类型检验。
这样写也行：
[[ $foo -gt 7 ]]
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
$*表示所有命令行参数，所以你可能想这样写来逐个处理参数，但参数中包含空格时就会失败, 如：
#!/bin/bash
# Incorrect version
for x in $*; do
  echo "parameter: '$x'"
done
$ ./myscript 'arg 1' arg2 arg3
parameter: 'arg'
parameter: '1'
parameter: 'arg2'
parameter: 'arg3'
正确的方法是使用 $@:
#!/bin/bash
# Correct version
for x in "$@"; do
  echo "parameter: '$x'"
done

$ ./myscript 'arg 1' arg2 arg3
parameter: 'arg 1'
parameter: 'arg2'
parameter: 'arg3'
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
在 bash 的手册中对 $* 和 $@ 的说明如下：
* Expands to the positional parameters, starting from one. 
     When the expansion occurs within double quotes, it
     expands to a single word with the value of each parameter
     separated by the first character of the IFS special variable. 
     That is, "$*" is equivalent to "$1c$2c...",
@ Expands to the positional parameters, starting from one.
     When the expansion occurs within double quotes, each
     parameter expands to a separate word.  That  is,  "$@" 
     is equivalent to "$1" "$2" ... 
可见，不加引号时 $* 和 $@ 是相同的，但$* 会被扩展成一个字符串，而$@会扩展每一个参数。
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
函数命名 function foo() 
在bash中没有问题，但其他shell中有可能出错。
不要把 function 和括号一起使用。 
最为保险的做法是使用括号, 即
foo() {
  ...
}
