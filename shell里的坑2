grep foo bar.txt | while read line; do ((count++)); done  # 错误
这行代码数出bar.txt文件中包含foo的行数，虽然很麻烦, 等同于grep -c foo bar或者 grep foo bar | wc -l
乍一看没有问题，但执行之后count变量却没有值。
因为管道中的每个命令都放到一个新的子shell中执行， 所以子shell中定义的count变量无法传递出来。
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
if [grep foo myfile]  # 错误
初学者常犯的错误，就是将 if 语句后面的 [ 当作if语法的一部分。
实际上它是一个命令，相当于 test 命令， 而不是 if 语法。
if 会将 if 到 then 之间的所有命令的返回值当作判断条件。
因此上面的语句应当写成
if grep foo myfile > /dev/null; then ...
if [bar="$foo"]

同样，[ 是个命令，不是 if 语句的一部分，所以要注意空格。
if [ bar = "$foo" ]
if [ [ a = b ] && [ c = d ] ]
同样的问题，[ 不是 if 语句的一部分，当然也不是改变逻辑判断的括号。
它是一个命令。
if [ a = b ] && [ c = d ]        # 正确
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
cat file | sed s/foo/bar/ > file # 错误
你不能在同一条管道操作中同时读写一个文件。
根据管道的实现方式，file要么被截断成0字节，要么会无限增长直到填满整个硬盘。 
如果想改变原文件的内容，只能先将输出写到临时文件中再用mv命令。
sed 's/foo/bar/g' file > tmpfile && mv tmpfile file
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
echo $foo
这句话还有什么错误码？一般来说是正确的，但下面的例子就有问题了。
foo="Please enter name of *.zip"
echo $foo         # 错误！
如果恰巧当前目录下有个tmp.zip文件，就会显示成
Please enter name of tmp.zip
所以即使是echo也别忘记给变量加双引号:
echo "$foo"
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
$foo=bar 
变量赋值时无需加 $ 符号, 这不是Perl或PHP。
foo = bar
变量赋值时等号两侧不能加空格——这不是C语言。
foo=bar # 正确
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
echo <<EOF
here document是个好东西，它可以输出成段的文字而不用加引号也不用考虑换行符的处理问题。 
不过here document输出时应当使用cat而不是echo。
# This is wrong:
echo <<EOF
Hello world
EOF

# This is right:
cat <<EOF
Hello world
EOF
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
cd /foo; bar
cd有可能会出错，出错后 bar 命令就会在你预想不到的目录里执行了。所以一定要记得判断cd的返回值。
cd /foo && bar
如果你要根据cd的返回值执行多条命令，可以用 ||。
cd /foo || exit 1;
bar
baz
关于目录的一点题外话，假设你要在shell程序中频繁变换工作目录，如下面的代码：
find ... -type d | while read subdir; do
　　cd "$subdir" && whatever && ... && cd -
done
不如这样写：
find ... -type d | while read subdir; do
  (cd "$subdir" && whatever && ...)
done
括号会强制启动一个子shell，
这样在这个子shell中改变工作目录不会影响父shell（执行这个脚本的shell）．
这样就可以省掉cd - 的麻烦。
你也可以灵活运用 pushd、popd、dirs 等命令来控制工作目录。
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
[ bar == "$foo" ]  # 错!
[ 命令中不能用 ==，应当写成[ bar = "$foo" ] && echo yes
或: [[ bar == $foo ]] && echo yes
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
for i in {1..10}; do ./something &; done
& 后面不应该再放分号' ; '，因为 & 已经起到了语句分隔符的作用，无需再用;。
for i in {1..10}; do ./something & done
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
cmd1 && cmd2 || cmd3
有人喜欢用这种格式来代替 if...then...else 结构，但其实并不完全一样。
如果cmd2返回一个非真值，那么cmd3则会被执行。 
所以还是老老实实地用 if cmd1; then cmd2; else cmd3 为好。
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
su -c 'some command'
原文的意思是，这条基本上正确，
但使用者的目的是要将 -c 'some command' 传给shell．
而恰好 su 有个 -c 参数，所以su 只会将 'some command' 传给shell。所以应该这么写：
su root -c 'some command'
但是在我的平台上，man su 的结果中关于 -c 的解释为
-c, --commmand=COMMAND
pass a single COMMAND to the shell with -c
也就是说，-c 'some command' 同样会将 -c 'some command' 这样一个字符串传递给shell，
和这条就不符合了, 不管怎样，先将这一条写在这里吧。
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
UTF-8的BOM(Byte-Order Marks)问题
UTF-8编码可以在文件开头用几个字节来表示编码的字节顺序，这几个字节称为BOM。
但Unix格式的UTF-8编码不需要BOM。
多余的BOM会影响shell解析，特别是开头的 #!/bin/sh 之类的指令将会无法识别。
MS-DOS格式的换行符(CRLF)也存在同样的问题。
如果你将shell程序保存成DOS格式，脚本就无法执行了。
$ ./dos
-bash: ./dos: /bin/sh^M: bad interpreter: No such file or directory
echo "Hello World!"
交互执行这条命令会产生以下的错误：
-bash: !": event not found
因为 !" 会被当作命令行历史替换的符号来处理。不过在shell脚本中没有这样的问题。
不幸的是，你无法使用转义符来转义!：
$ echo "hi\!"
hi\!
解决方案之一，使用单引号，即
$ echo 'Hello, world!'
如果你必须使用双引号，可以试试通过 set +H 来取消命令行历史替换。
set +H
echo "Hello, world!"
for arg in $*
(完)
