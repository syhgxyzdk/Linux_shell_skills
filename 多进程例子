在bash中，使用后台任务来实现任务的“多进程化”。
在不加控制的模式下，不管有多少 任务，全部都后台执行。
也就是说，在这种情况下，有多少任务就有多少“进程”在同时执行。我们就先实现第一种情况：

实例一：正常情况脚本
# !/bin/bash 
 for  ((i = 0 ;i < 5 ;i ++ )); do 
         {
                  sleep   3 ;echo  1 >> aa  &&  echo  " done! " 
         } 
 done
 wait 
 cat aa | wc  - l
 rm aa
这种情况下，程序顺序执行，每个循环3s，共需15s左右。
“多进程”实现
 for  ((i = 0 ;i < 5 ;i ++ )); do 
         {
                  sleep   3 ;echo  1 >> aa  &&  echo  " done! " 
         }  & 
 done
 wait 
 cat aa | wc  - l
 rm aa
只在上面基础上多加了一个后台执行&符号，此时是5个循环任务并发执行，最后需要3s左右时间。
效果非常明显。

这里需要说明一下wait的作用:
wait是等待前面的后台任务全部完成才往下执行，否则程序本身是不会等待的，
这样对后面依赖前面任务结果的命令 来说就可能出错。例如上面wc -l的命令就报错：不存在aa这个文件。
wait命令的官方解释如下：
wait [n]
    Wait for the specified process and return its termination status.  n may be a process ID or  a  job  specification; if a job spec is given, all processes in that job's pipeline are waited for.  If n is not given, all currently active child processes are waited for, and the return status is zero.  If  n  specifies  a  non-existent process  or job, the return status is 127.  Otherwise, the return status is the exit status of the last processor job waited for.
 
以上所讲的实例都是进程数目不可控制的情况，下面描述如何准确控制并发的进程数目。
 # !/bin/bash
 # 2006-7-12, by wwy
 # **************************************************************************************************
 # 此例子说明了一种用wait、read命令模拟多线程的一种技巧
 # 此技巧往往用于多主机检查，比如ssh登录、ping等等这种单进程比较慢而不耗费cpu的情况
 # 还说明了多线程的控制
 # **************************************************************************************************
 
 #  此处定义一个函数，作为一个线程(子进程) 
 function a_sub {  
    sleep  3   #  线程的作用是sleep 3s 
 }

 tmp_fifofile = "/tmp/$$.fifo" 
 mkfifo  $tmp_fifofile              #  新建一个fifo类型的文件 
 exec 6 <> $tmp_fifofile       #  将fd6指向fifo类型 
 rm  $tmp_fifofile 

 thread = 15                         #  此处定义线程数 
 for  ((i = 0 ;i < $thread ;i ++ )); do  
 echo
 done  >& 6                          # 在fd6中放置了$thread个回车符 
 
    for  ((i = 0 ;i < 50 ;i ++ )); do # 50次循环，可以理解为50个主机，或其他... 
 read   - u6 
 #  一个read -u6命令执行一次，就从fd6中减去一个回车符，然后向下执行
 # fd6中没有回车符的时候，就停在这了，从而实现了线程数量控制 
 
 {                         #  此处子进程开始执行，被放到后台
       a_sub  &&  {  #  此处可以用来判断子进程的逻辑
        echo  " a_sub is finished " 
       }  ||  {
        echo  " sub error " 
       }
       echo  >& 6   #  当进程结束以后，再向fd6中加上一个回车符，即补上了read -u6减去的那个 
 }  & 

 done

 wait                #  等待所有的后台子进程结束 
 exec   6 >&-    #  关闭df6 

 exit   0 
 
sleep 3s，线程数为15，一共循环50次，此脚本一共的执行时间大约为3 * 50 / 15 = 12秒
15×3=45, 所以 3 x 3s = 9s
(50-45=5)<15, 所以 1 x 3s = 3s
所以 9s + 3s = 12s
$ time ./multithread.sh >/dev/null
real         0m12.025s
user        0m0.020s
sys          0m0.064s

而当不使用多线程技巧的时候，执行时间为：50 x 3s = 150s !!!

此程序中的命令mkfifo tmpfile和linux中的命令mknod tmpfile p效果相同。
区别是mkfifo为POSIX标准，因此推荐使用它。

该命令创建了一个先入先出的管道文件，并为其分配文件标志符6。
管道文件是进程间通信的一种方式，注意这一句很重要:
exec   6 <> $tmp_fifofile        #  将fd6指向fifo类型
如果没有这句，在向文件$tmp_fifofile或者&6写入数据时程序会被阻塞，直到有read读出了管道文件中的数据.
而执行了上面这一句后就可以在程序运行期间不断向fifo类 型的文件写入数据而不会阻塞，并且数据会被保存下来以供read程序读出。

--== End ==--
